from django.shortcuts import render
from django.http import HttpResponse
from django.db.models import Q
from django.core.files.base import ContentFile

from forms import UploadForm,SearchForm
from models import mwinfo

import os
import hashlib
import magic
import json
from mal2img.convert import convert
from vtreport.vtsearch import vtsearch
from avclass.avclass_labeler import labeler

def upload(request):
    samples = mwinfo.objects.order_by('-submit_date')[:5]
    if request.method == 'POST' and request.FILES['sample']:
        myfile = request.FILES['sample']
        form = UploadForm(request.POST, request.FILES)
        if form.is_valid():
            file_content = request.FILES['sample'].read()
            mw = mwinfo()
            mw.sha256 = hashlib.sha256(file_content).hexdigest()
            mw.sha1 = hashlib.sha1(file_content).hexdigest()
            mw.md5 = hashlib.md5(file_content).hexdigest()
            mw.file_size = myfile.size
            mw.file_type = myfile.content_type
            mw.file_name = myfile.name
            mw.sample.save(mw.sha256,ContentFile(file_content))
            mw.image.save(mw.sha256+".png",ContentFile(convert(mw.sample.path)))
            mw.vtreport.save(mw.sha256+".json",ContentFile(vtsearch(mw.sha256)))
            mw.description = magic.from_file(mw.sample.path)
            mw.avlabel = labeler(mw.vtreport.path)
            mw.save()
            context = {'sha256': mw.sha256, 'samples': samples}
            return render(request, 'upload.html', context)
    context = {'samples': samples}
    return render(request, 'upload.html', context)

def samples(request):
    samples = mwinfo.objects.order_by('sha256')
    context = {'samples': samples, 'showas': "Samples"}
    return render(request, 'list.html', context)

def gallery(request):
    samples = mwinfo.objects.order_by('avlabel')
    context = {'samples': samples, 'showas': "Gallery"}
    return render(request, 'list.html', context)

def detail(request, sha256):
    try:
        mw = mwinfo.objects.get(pk=sha256)
        with open(mw.vtreport.path) as data:    
            vtreport = json.load(data)
    except:
        mw = None
        vtreport = {}
    context = {'sha256': sha256, 'vtreport': vtreport, 'mw': mw}
    return render(request, 'detail.html', context)

def search(request):
    if request.method == 'POST':
        form = SearchForm(request.POST)
        if form.is_valid():
            search = form.cleaned_data['search']
            showas = form.cleaned_data['showas']
            if search:
                samples = mwinfo.objects.filter(Q(sha256__icontains=search) | Q(file_name__icontains=search) | Q(avlabel__icontains=search)).order_by('avlabel')
            else:
                samples = mwinfo.objects.order_by('sha256')
            context = {'samples': samples, 'search': search, 'showas': showas}
            return render(request, 'list.html', context)
    samples = mwinfo.objects.order_by('sha256')
    context = {'samples': samples, 'search': "", 'showas': "Samples"}
    return render(request, 'list.html', context)